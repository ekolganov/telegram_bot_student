"""–°–µ—Ä–≤–µ—Ä Telegram –±–æ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ"""
import logging
import asyncio

from handlers import students, themes, dictations
from middlewares import AccessMiddleware

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = "1736892712:AAHDtOBkXm8t8xjgRnCMb8qfT3ZZuAG4QzY"
ACCESS_ID = [344928892, 1596273768]

# API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
# ACCESS_ID = os.getenv("TELEGRAM_ACCESS_ID")


async def main():
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher(bot, storage=MemoryStorage())
    dp.middleware.setup(AccessMiddleware(ACCESS_ID))

    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )

    @dp.message_handler(state='*', commands='cancel')
    @dp.message_handler(Text(equals='cancel', ignore_case=True), state='*')
    async def cancel_handler(message: types.Message, state: FSMContext):
        """–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ª—é–±–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        current_state = await state.get_state()
        if current_state is None:
            return

        logging.info('Cancelling state %r', current_state)
        await state.finish()
        await message.answer("–û—Ç–º–µ–Ω–∞")

    @dp.message_handler(commands=['start', 'help'], state="*")
    async def send_welcome(message: types.Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""

        list_commands = [
            "–î–µ–π—Å—Ç–≤–∏—è —Å —É—á–µ–Ω–∏–∫–∞–º–∏\n",
            "–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤: /students_list",
            "–î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞: /add_student",
            "–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –∏ —Ç–µ–º –¥–ª—è –∏—Ö –∫–ª–∞—Å—Å–∞: /student_themes_list",
            "\n–î–µ–π—Å—Ç–≤–∏—è —Å —Ç–µ–º–∞–º–∏\n",
            "–°–ø–∏—Å–æ–∫ —Ç–µ–º –∏ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ –∫ –Ω–∏–º: /themes_list",
            "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–º—É: /add_theme\n",
            "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–∏–∫—Ç–∞–Ω—Ç—ã: /dictations",
            "–î–æ–±–∞–≤–∏—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç: /add_dictation",
            # "–¢–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è 5-9 –∫–ª–∞—Å—Å—ã: /themes_middle_school",
        ]

        answer_message = "üí¨–ë–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞:\n\n" + "\n".join(list_commands)
        await message.answer(answer_message)

        button_help = KeyboardButton('/help')
        button_cancel = KeyboardButton('/cancel')
        kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).row(button_help, button_cancel)
        await message.reply(message.text, reply_markup=kb)

    students.register_handlers_students(dp)
    themes.register_handlers_themes(dp)
    dictations.register_handlers_dictations(dp)

    await dp.skip_updates()
    await dp.start_polling()


if __name__ == '__main__':
    asyncio.run(main())
