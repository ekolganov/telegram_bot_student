"""–°–µ—Ä–≤–µ—Ä Telegram –±–æ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ"""
import logging
import students
import exceptions

from aiogram import Bot, Dispatcher, executor, types
from middlewares import AccessMiddleware

logging.basicConfig(level=logging.INFO)

API_TOKEN = "1736892712:AAHDtOBkXm8t8xjgRnCMb8qfT3ZZuAG4QzY"
ACCESS_ID = [344928892]

#API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
#ACCESS_ID = os.getenv("TELEGRAM_ACCESS_ID")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(AccessMiddleware(ACCESS_ID))


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–º–æ—â—å –ø–æ –±–æ—Ç—É"""
    await message.answer(
        "–ë–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞\n\n"
        "–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤: /students_list\n"
        "–¢–µ–º—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è 5-9 –∫–ª–∞—Å—Å—ã: /themes_middle_school\n"
        
        "\nüí°–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ"
        "\n‚û°–í–∞—Å—è –ü—É–ø–∫–∏–Ω 6 –∫–ª–∞—Å—Å"
        "\n–º–æ–∂–Ω–æ —Å –§–ò–û –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ–º"
        "\n‚û°–í–∞—Å—è –ü—É–ø–∫–∏–Ω –î–º–∏—Ç—Ä–∏–µ–≤–∏—á 6 –∫–ª–∞—Å—Å –æ–±–æ–ª—É—Ç—Å –æ–±–æ–ª—Ç—É—Å–æ–º"
    )


@dp.message_handler(commands=['students_list'])
async def list_of_students(message: types.Message):
    list_students = students.get_students()
    if not list_students:
        await message.answer("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞")
        return

    list_students_rows = [
        f"‚û° {student.fullname} | {student.grade} | {student.description}\n"
        f"—É–¥–∞–ª–∏—Ç—å {student.fullname} ‚ùå /del{student.id}"
        for student in list_students]

    answer_message = "üí¨–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n\n" + "\n\n".join(list_students_rows)
    await message.answer(answer_message)


@dp.message_handler(lambda message: message.text.startswith('/del'))
async def del_expense(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
    """—Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç /del*, –≥–¥–µ —Ü–∏—Ñ—Ä—ã –≤–º–µ—Å—Ç–æ * –æ–±–æ–∑–Ω–∞—á–∞—é—Ç –∫–∞–∫ 4:"""

    row_id = int(message.text[4:])
    students.delete_student(row_id)

    answer_message = "–£–¥–∞–ª–∏–ª"
    await message.answer(answer_message)


@dp.message_handler()
async def add_student(message: types.Message):
    """–ü–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–ª—É—à–∞–µ—Ç —á–∞—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""

    try:
        student = students.add_student(message.text)
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return
    answer_message = (
        f"üí¨–î–æ–±–∞–≤–ª–µ–Ω —É—á–µ–Ω–∏–∫\n\n"
        f"{student.fullname} | {student.grade} | {student.description}"
    )
    await message.answer(answer_message)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
