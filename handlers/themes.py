import modules.shared_module
from modules import themes_module, shared_module
import exceptions

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


class Form(StatesGroup):
    wait_theme_grade = State()
    wait_theme_name = State()
    wait_theme_renamed_text = State()


async def list_of_themes_dictations(message: types.Message):
    """ –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –∏ –¥–∏–∫—Ç–∞–Ω—Ç–æ–≤ –¥–ª—è –Ω–∏—Ö """

    list_themes = themes_module.get_themes()
    if not list_themes:
        await message.answer("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã")
        return

    th_row = []
    for th in list_themes:
        grade = th.themes_grade_number
        themes = [f"üìí {th_name}\n"
                  f"‚úè/rename_theme{th_id}  ‚ùå/del_theme{th_id}\n"
                  f"–¥–∏–∫—Ç–∞–Ω—Ç—ã: üìì/dictations{th_id}\n–¥–æ–±–∞–≤–∏—Ç—å –¥–∏–∫—Ç–∞–Ω—Ç: üìì/add_dictation{th_id}\n"
                  for th_name, th_id in th.theme_names_ids]

        th_row += [f"‚û° {grade}\n\n"
                   f"{modules.shared_module.unpack_list(themes)}"]

    answer_message = "üí¨–°–ø–∏—Å–æ–∫ —Ç–µ–º:\n\n"
    await message.answer(answer_message)
    await shared_module.pagination_output(message, th_row)


async def del_theme(message: types.Message):
    """ –£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —Ç–µ–º—ã –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É """

    row_id = shared_module.get_id_command(message.text)

    themes_module.delete_theme(row_id)

    answer_message = "–£–¥–∞–ª–∏–ª"
    await message.answer(answer_message)


async def add_theme1(message: types.Message, state: FSMContext):
    """ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –≤–≤–æ–¥ –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ç–µ–º—ã"""

    await state.finish()
    answer_message = (
        "–î–ª—è –∫–∞–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ —Ç–µ–º–∞? –≤–≤–µ–¥–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚û°6 –∫–ª–∞—Å—Å"
    )

    await message.answer(answer_message)
    await Form.wait_theme_grade.set()


async def add_theme2(message: types.Message, state: FSMContext):
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–º—ã –∏ –ø—Ä–æ—Å–∏—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã """

    await state.update_data(theme_grade=message.text)
    st = await state.get_data()

    try:
        themes_module.add_theme_grade_check(st["theme_grade"])
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return

    answer_message = (
        "–û—Ç–ª–∏—á–Ω–æ!\n"
        "—Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –≤ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"
    )
    await message.answer(answer_message)
    await Form.wait_theme_name.set()


async def add_theme3(message: types.Message, state: FSMContext):
    """ –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–º—É """

    await state.update_data(theme_name=message.text)
    st = await state.get_data()

    try:
        theme = themes_module.add_theme(st["theme_grade"], st["theme_name"])
    except exceptions.ExistingEntry as e:
        await message.answer(str(e))
        return

    answer_message = (
        f"‚úÖ–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ–º–∞ –¥–ª—è {theme.themes_grade_number}–∞\n\n"
        f"üìí {theme.theme_name}"
    )

    await state.finish()
    await message.answer(answer_message)


async def rename_theme1(message: types.Message, state: FSMContext):
    """ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã, –≤—ã–≤–æ–¥ —Ç–µ–∫—É—â–µ–π –∏ –ø—Ä–∏–≥–ª–æ—Å –Ω–∞ –≤–≤–æ–¥ –Ω–æ–≤–æ–π """

    theme_id = shared_module.get_id_command(message.text)

    await state.update_data(theme_id=theme_id)

    theme_old = themes_module.get_theme(theme_id)

    answer_message = (f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n\n"
                      f"üìí {theme_old.theme_name}\n\n"
                      f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã")
    await message.answer(answer_message)
    await Form.wait_theme_renamed_text.set()


async def rename_theme2(message: types.Message, state: FSMContext):
    """ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã –Ω–∞ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"""

    await state.update_data(new_theme_name=message.text)
    st = await state.get_data()

    new_theme_name = themes_module.rename_theme(st["theme_id"], st["new_theme_name"])

    answer_message = (f"‚úÖ–û—Ç–ª–∏—á–Ω–æ!\n"
                      f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:\n\n"
                      f"üìí {new_theme_name.theme_name}")

    await state.finish()
    await message.answer(answer_message)


def register_handlers_themes(dp: Dispatcher):
    """ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è message handler —Ç–µ–º –¥–ª—è –±–æ—Ç–∞"""

    dp.register_message_handler(list_of_themes_dictations, commands='themes_list', state="*")
    dp.register_message_handler(del_theme, lambda message: message.text.startswith('/del_theme'), state="*")

    dp.register_message_handler(add_theme1, commands="add_theme")
    dp.register_message_handler(add_theme2, state=Form.wait_theme_grade)
    dp.register_message_handler(add_theme3, state=Form.wait_theme_name)

    dp.register_message_handler(rename_theme1, lambda message: message.text.startswith('/rename_theme'), state="*")
    dp.register_message_handler(rename_theme2, state=Form.wait_theme_renamed_text)
