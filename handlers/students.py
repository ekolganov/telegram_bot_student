import handlers.share
import modules.share_module
from modules import students_module, share_module
import exceptions

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


class Form(StatesGroup):
    wait_student = State()


async def list_of_students(message: types.Message):
    """ –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ """

    list_students = students_module.get_students()
    if not list_students:
        await message.answer("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞")
        return

    list_students_rows = [
        f"‚û° {student.fullname} | {student.grade} | {student.description}\n"
        f"‚ùå /del_student{student.id}"
        for student in list_students]

    answer_message = "üí¨–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤:\n\n" + "\n\n".join(list_students_rows)
    await message.answer(answer_message)


async def list_of_students_and_themes(message: types.Message):
    """ –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –∏ —Ç–µ–º, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏—Ö –∫–ª–∞—Å—Å–æ–º """

    list_students_and_themes = students_module.get_student_themes()
    if not list_students_and_themes:
        await message.answer("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π —Ç–µ–º—ã –∏–ª–∏ —É—á–µ–Ω–∏–∫–∞")
        return

    st_th_row = []
    for st_th in list_students_and_themes:
        name = st_th.student_fullname
        themes = [f"‚ñ™ {th}" for th in st_th.theme_name]

        st_th_row += [f"‚û° {name}\n"
                      f"{modules.share_module.unpack_list(themes)}"]

    answer_message = "üí¨–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –∏ —Ç–µ–º –¥–ª—è –µ–≥–æ –∫–ª–∞—Å—Å–∞:\n\n"

    await message.answer(answer_message)
    await handlers.share.pagination_output(message, st_th_row)


async def del_student(message: types.Message):
    """ –£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É """

    row_id = share_module.get_id_command(message.text)
    students_module.delete_student(row_id)

    answer_message = "–£–¥–∞–ª–∏–ª"
    await message.answer(answer_message)


async def add_student1(message: types.Message, state: FSMContext):
    """ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ """

    await state.finish()
    await message.answer(
        "üí°–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n"
        "‚û°–í–∞—Å—è –ü—É–ø–∫–∏–Ω 6 –∫–ª–∞—Å—Å\n"
        "–º–æ–∂–Ω–æ —Å –§–ò–û –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ–º\n"
        "‚û°–í–∞—Å—è –ü—É–ø–∫–∏–Ω –î–º–∏—Ç—Ä–∏–µ–≤–∏—á 6 –∫–ª–∞—Å—Å –æ–±–æ–ª—É—Ç—Å –æ–±–æ–ª—Ç—É—Å–æ–º\n"
    )
    await Form.wait_student.set()


async def add_student2(message: types.Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""

    await state.update_data(student=message.text)
    st = await state.get_data()

    try:
        student = students_module.add_student(st["student"])
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return

    answer_message = (
        f"üí¨–î–æ–±–∞–≤–ª–µ–Ω —É—á–µ–Ω–∏–∫\n\n"
        f"{student.fullname} | {student.grade} | {student.description}"
    )
    await state.finish()
    await message.answer(answer_message)


def register_handlers_students(dp: Dispatcher):
    """ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è message handler —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –±–æ—Ç–∞"""

    dp.register_message_handler(list_of_students, commands='students_list', state="*")
    dp.register_message_handler(list_of_students_and_themes, commands='student_themes_list', state="*")
    dp.register_message_handler(del_student, lambda message: message.text.startswith('/del_student'), state="*")

    dp.register_message_handler(add_student1, commands="add_student")
    dp.register_message_handler(add_student2, state=Form.wait_student)
