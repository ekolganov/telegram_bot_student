import handlers.share
from modules import share_module, ege_module
from typing import BinaryIO

import exceptions

from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


class Form(StatesGroup):
    """ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥—É–ª—è """

    wait_add_ege_task_name = State()
    wait_add_ege_task_description = State()

    wait_rewrite_ege_task = State()

    wait_rewrite_content_description = State()

    wait_rewrite_ege_name_task = State()

    wait_content_upload = State()
    wait_content_description = State()


async def get_list_ege_tasks(message: types.Message):
    """ –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫ –ï–ì–≠ """

    list_ege_tasks = ege_module.get_ege_tasks()

    if not list_ege_tasks:
        await message.answer("–ù–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è")
        return

    ege_tasks_row = []
    for ege_task in list_ege_tasks:
        list_ege_content_lite, content_count = ege_module.get_list_ege_content_lite(ege_task.id)

        ege_content = [f"üìå–¢–∏–ø –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {ege_content.content_type}\n"
                       f"–û–ø–∏—Å–∞–Ω–∏–µ: {ege_content.description}\n"
                       f"‚Ñπ /get_content_ege{ege_content.id}\n"
                       f"‚úè/rewrite_content_description{ege_content.id}\n"
                       f"‚ùå/del_ege_content{ege_content.id}\n"
                       for ege_content in list_ege_content_lite]

        ege_tasks_row += [f"üìî {ege_task.task}  ‚úè/rewrite_ege_task{ege_task.id} ‚ùå/del_ege_task{ege_task.id}\n"
                          f"‚ñ™ {ege_task.task_name}\n"
                          f"‚úè/rewrite_ege_name_task{ege_task.id}\n\n"
                          f"–î–æ–±–∞–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã /add_ege_content{ege_task.id}\n\n"
                          f"–í—Å–µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {content_count}\n\n"
                          f"{share_module.unpack_list(ege_content)}"]

    answer_message = "üí¨–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ï–ì–≠:\n\n"
    await message.answer(answer_message)
    await handlers.share.pagination_output(message, ege_tasks_row)


async def upload_content1(message: types.Message, state: FSMContext):
    """ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ """

    await state.finish()

    task_id = share_module.get_id_command(message.text)
    await state.update_data(task_id=task_id)

    await message.answer("–í—Å—Ç–∞–≤—å—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç\n"
                         "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–µ–∫, –∫—Ä–æ–º–µ —Ç–æ–π, —á—Ç–æ –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ")
    await Form.wait_content_upload.set()


async def upload_content2(message: types.Message, state: FSMContext):
    """ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–ª—å—à–µ"""

    if message.content_type == "document":
        bo: BinaryIO = await message.document.download()
        bo.close()
        await state.update_data(file_id=str(message.document.file_id),
                                document_file_name=str(message.document.file_name),
                                document_mime_type=str(message.document.mime_type))
    elif message.content_type == "photo":
        bo: BinaryIO = await message.photo[-1].download()
        bo.close()
        await state.update_data(file_id=str(message.photo[-1].file_id))

    await state.update_data(content_type=str(message.content_type))

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞:\n"
                         "–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /None - –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
    await Form.wait_content_description.set()


async def upload_content3(message: types.Message, state: FSMContext):
    """ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –ë–î """

    await state.update_data(description=str(message.text))
    st = await state.get_data()

    try:
        if st["content_type"] == "photo":
            ege_module.upload_ege_content(st["file_id"], st["description"], st["task_id"], st["content_type"])
        elif st["content_type"] == "document":
            ege_module.upload_ege_content(st["file_id"], st["description"], st["task_id"], st["content_type"],
                                          st["document_file_name"], st["document_mime_type"])
    except exceptions.NotCorrectUpload as e:
        await message.answer(str(e))
        return
    await message.answer("‚úÖ–ì–æ—Ç–æ–≤–æ")
    await state.finish()


async def get_ege_content(message: types.Message):
    """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —é–∑–µ—Ä—É —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ telegram_file_id """

    ege_content_id = share_module.get_id_command(message.text)

    content = ege_module.get_ege_content_lite(ege_content_id)

    try:
        if content.content_type == "photo":
            await message.answer_photo(content.telegram_file_id, content.description)
        elif content.content_type == "document":
            await message.answer_document(content.telegram_file_id, content.description)
    except Exception as ex:
        await message.answer(f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –≤—ã–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç–∞, {ex, ex.args}")


async def del_ege_content(message: types.Message):
    """ –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç """

    ege_content_id = share_module.get_id_command(message.text)
    ege_module.del_ege_content(ege_content_id)

    await message.answer("–£–¥–∞–ª–∏–ª")


async def rewrite_ege_task1(message: types.Message, state: FSMContext):
    """ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ï–ì–≠ –∑–∞–¥–∞–Ω–∏—è """

    await state.finish()
    ege_id = share_module.get_id_command(message.text)
    await state.update_data(ege_id=ege_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await Form.wait_rewrite_ege_task.set()


async def rewrite_ege_task2(message: types.Message, state: FSMContext):
    """ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ï–ì–≠ –∑–∞–¥–∞–Ω–∏—è """

    rewrited_task = message.text
    st = await state.get_data()

    ege_module.rewrite_ege_task(st["ege_id"], rewrited_task)
    await message.answer("‚úÖ–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ")

    await state.finish()


async def del_ege_task(message: types.Message):
    """ –£–¥–∞–ª—è–µ—Ç –ï–ì–≠ –∑–∞–¥–∞–Ω–∏–µ –∏ –µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç """

    ege_id = share_module.get_id_command(message.text)
    ege_module.del_ege_task(ege_id)
    await message.answer("–ó–∞–¥–∞–Ω–∏–µ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ –Ω–µ–º—É —É–¥–∞–ª–µ–Ω—ã")


async def add_ege_task1(message: types.Message, state: FSMContext):
    """ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ï–ì–≠ """

    await state.finish()

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:\n"
                         "–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –∑–∞–¥–∞–Ω–∏–µ")
    await Form.wait_add_ege_task_name.set()


async def add_ege_task2(message: types.Message, state: FSMContext):
    """ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ï–ì–≠ –∑–∞–¥–∞–Ω–∏—è"""

    await state.update_data(tasks=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É/–æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:")
    await Form.wait_add_ege_task_description.set()


async def add_ege_task3(message: types.Message, state: FSMContext):
    """ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ï–ì–≠ –∑–∞–¥–∞–Ω–∏—è """

    await state.update_data(tasks_description=message.text)
    st = await state.get_data()

    ege_module.add_ege_task(st["tasks"], st["tasks_description"])

    await message.answer("‚úÖ–ó–∞–¥–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    await state.finish()


async def rewrite_content_description1(message: types.Message, state: FSMContext):
    """ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ """

    await state.finish()

    ege_content_id = share_module.get_id_command(message.text)
    await state.update_data(ege_content_id=ege_content_id)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É:")
    await Form.wait_rewrite_content_description.set()


async def rewrite_content_description2(message: types.Message, state: FSMContext):
    """ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ """

    st = await state.get_data()
    rewrited_content = message.text

    ege_module.rewrite_content_description(st["ege_content_id"], rewrited_content)

    await message.answer("‚úÖ–û–ø–∏—Å–∞–Ω–∏–µ –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    await state.finish()


async def rewrite_ege_name_task1(message: types.Message, state: FSMContext):
    """ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è/—Ç–µ–º–∞—Ç–∏–∫–∏ –ï–ì–≠ –∑–∞–¥–∞–Ω–∏—è """

    await state.finish()

    ege_id = share_module.get_id_command(message.text)
    await state.update_data(ege_id=ege_id)

    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ/—Ç–µ–º–∞—Ç–∏–∫—É –ï–ì–≠ –∑–∞–¥–∞–Ω–∏—è")
    await Form.wait_rewrite_ege_name_task.set()


async def rewrite_ege_name_task2(message: types.Message, state: FSMContext):
    """ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è/—Ç–µ–º–∞—Ç–∏–∫–∏ –ï–ì–≠ –∑–∞–¥–∞–Ω–∏—è """

    st = await state.get_data()
    rewrited_ege_name_task = message.text

    ege_module.rewrite_ege_name_task(st["ege_id"], rewrited_ege_name_task)

    await message.answer("‚úÖ–û–ø–∏—Å–∞–Ω–∏–µ/—Ç–µ–º–∞—Ç–∏–∫–∞ –ï–ì–≠ –∑–∞–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    await state.finish()


def register_handlers_ege(dp: Dispatcher):
    """ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è message handler –¥–ª—è –±–æ—Ç–∞ """

    dp.register_message_handler(add_ege_task1, commands='add_ege_task', state="*")
    dp.register_message_handler(add_ege_task2, state=Form.wait_add_ege_task_name)
    dp.register_message_handler(add_ege_task3, state=Form.wait_add_ege_task_description)

    dp.register_message_handler(upload_content1, lambda message: message.text.startswith('/add_ege_content'), state="*")
    dp.register_message_handler(upload_content2, state=Form.wait_content_upload, content_types=['photo', "document"])
    dp.register_message_handler(upload_content3, state=Form.wait_content_description)

    dp.register_message_handler(get_list_ege_tasks, commands='ege_tasks_list', state="*")
    dp.register_message_handler(get_ege_content,
                                lambda message: message.text.startswith('/get_content_ege'), state="*")
    dp.register_message_handler(del_ege_content,
                                lambda message: message.text.startswith('/del_ege_content'), state="*")
    dp.register_message_handler(del_ege_task, lambda message: message.text.startswith('/del_ege_task'), state="*")

    dp.register_message_handler(rewrite_content_description1,
                                lambda message: message.text.startswith('/rewrite_content_description'), state="*")
    dp.register_message_handler(rewrite_content_description2, state=Form.wait_rewrite_content_description)

    dp.register_message_handler(rewrite_ege_task1,
                                lambda message: message.text.startswith('/rewrite_ege_task'), state="*")
    dp.register_message_handler(rewrite_ege_task2, state=Form.wait_rewrite_ege_task)

    dp.register_message_handler(rewrite_ege_name_task1,
                                lambda message: message.text.startswith('/rewrite_ege_name_task'), state="*")
    dp.register_message_handler(rewrite_ege_name_task2, state=Form.wait_rewrite_ege_name_task)
